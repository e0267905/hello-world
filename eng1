from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTShadowClient
import random, time, datetime
import pandas as pd
import json

# A random programmatic shadow client ID.
SHADOW_CLIENT = "myShadowClient_1"

# The unique hostname that &IoT; generated for 
# this device.
HOST_NAME = "a3oyyu1cc14jj3-ats.iot.us-east-1.amazonaws.com"

# The relative path to the correct root CA file for &IoT;, 
# which you have already saved onto this device.
ROOT_CA = "RootCA1.pem"

# The relative path to your private key file that 
# &IoT; generated for this device, which you 
# have already saved onto this device.
PRIVATE_KEY = "cb9da1fb15-private.pem.key"

# The relative path to your certificate file that 
# &IoT; generated for this device, which you 
# have already saved onto this device.
CERT_FILE = "cb9da1fb15-certificate.pem.crt"

# A programmatic shadow handler name prefix.
SHADOW_HANDLER = "A0178594J_01"

# Automatically called whenever the shadow is updated.
def myShadowUpdateCallback(payload, responseStatus, token):
  print()
  print('UPDATE: $aws/things/' + SHADOW_HANDLER + 
    '/shadow/update/#')
  print("payload = " + payload)
  print("responseStatus = " + responseStatus)
  print("token = " + token)

# Create, configure, and connect a shadow client.
print('Connecting to AWS IoT!')
myShadowClient = AWSIoTMQTTShadowClient(SHADOW_CLIENT)
myShadowClient.configureEndpoint(HOST_NAME, 8883)
myShadowClient.configureCredentials(ROOT_CA, PRIVATE_KEY,
  CERT_FILE)
myShadowClient.configureConnectDisconnectTimeout(10)
myShadowClient.configureMQTTOperationTimeout(5)
myShadowClient.connect()

# Create a programmatic representation of the shadow.
myDeviceShadow = myShadowClient.createShadowHandlerWithName(SHADOW_HANDLER, True)

print('Program start!')
df_eng = pd.read_csv('train_FD001.txt', delim_whitespace=True, header=None)
sensor_name = ['sensor'+ str(i) for i in range(1,22)]
columns.list = ['id', 'cycle', 'os1', 'os2', 'os3'] + sensor_name
df_eng = pd.DataFrame(df_eng.values,columns=columns_list)
df_eng['id'] = df_eng['id'].apply(lambda s: 'FD001_' + str(s))
df_eng['Matriculation number'] = 'A0178594J'
nums, dimsm = df_eng.shape
  
for i in range(5000):
    tmp = df_eng.iloc[i]
    now = datetime.datetime.utcnow()
    tmp = tmp.append(pd.Series([str(now)],['timestamp']))
    tmp = tmp.to_dict()
    
    jsonPayload = {"state": {"reported": tmp}}
    jsonPayload = json.dumps(jsonPayload)
    print(jsonPayload)
    myDeviceShadow.shadowUpdate(jsonPayload,myShadowUpdateCallback, 5)
    time.sleep(1)
    
